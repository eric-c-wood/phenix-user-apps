#!/usr/bin/env python3

import sys
import json
import os
import random
import mako.template

def write_file(output_path, data):
	with open(output_path,'w') as output_file:
		output_file.write(data)

def generate_mac_addr():

    return ":".join(map(lambda x:"{0:02x}".format(x),[0x00,0x16,0x3E,
                                                     random.randint(0x00,0x7F),
                                                     random.randint(0x00,0xFF),
                                                     random.randint(0x00,0xFF)]))

def extract_app(exp,name='centos-interface-config'):
	apps = exp['spec']['scenario']['apps']

	for app in apps:
		if app['name'] == name:
			return app

def extract_node(exp,node_name):
    nodes = exp['spec']['topology']['nodes']

    for node in nodes:
        if node_name == node['general']['hostname']:
            return node

    return None

def add_inject(node,inject):    

    if node.get('injections', None):
        # If the inject already exists, do not add 
        # again
        for i in node['injections']:
            if i['src'] == inject['src'] and i['dst'] == inject['dst']:
                return

        node['injections'].append(inject)

    else:
        node['injections'] = [inject]

def remove_injects(node,match='/etc/phenix'):    
    
    indices_to_remove = []

    for i in range(0,len(node['injections'])):
        if match in node['injections'][i]['dst']:
            indices_to_remove.append(i)

    if len(indices_to_remove) > 0:
        new_injects = []
        for i in range(0,len(node['injections'])):
            if i in indices_to_remove:
                continue
            new_injects.append(node['injections'][i])

        node['injections'] = new_injects


def pre_start(exp,template_directory='/phenix/mako'):

    interface_prefix = "enp1s"

    nodes = exp['spec']['topology']['nodes']

    interface_template_path = os.path.join(template_directory,'centos-ifcfg-eth.mako')
    interface_template = mako.template.Template(filename=interface_template_path)

    route_template_path = os.path.join(template_directory,'centos-route-eth.mako')
    route_template = mako.template.Template(filename=route_template_path)
    

    for node in nodes:
        if node['hardware']['os_type'] == 'centos':

            # Remove any default injections
            remove_injects(node)
            remove_injects(node,"ens")

            for i in range(0,len(node['network']['interfaces'])):

                src_path = '/phenix/experiments/{}/startup/{}-ifcfg-{}{}'.format(exp['spec']['experimentName'],
                                                                        node['general']['hostname'],interface_prefix,i+1)

                kwargs = {
                    'src':src_path,
                    'dst':'/etc/sysconfig/network-scripts/ifcfg-{}{}'.format(interface_prefix,i+1),
                    'permissions':'0644',
                    'description':'Interface configuration for {}{}'.format(interface_prefix,i+1)
                }

                add_inject(node,inject=kwargs)
                node['network']['interfaces'][i]['mac'] = generate_mac_addr()

                with open(src_path,'w+') as output_file:
                    output_file.write(interface_template.render(interface=node['network']['interfaces'][i],name="{}{}".format(interface_prefix,i+1)))


                # Add any routes for this interface
                inject_routes = route_template.render(interface=node['network']['interfaces'][i],routes=node['network']['routes'])

                if len(inject_routes) > 0:

                    src_path = '/phenix/experiments/{}/startup/{}-route-{}{}'.format(exp['spec']['experimentName'],
                                                                        node['general']['hostname'],interface_prefix,i+1)
                    kwargs = {
                        'src':src_path,
                        'dst':'/etc/sysconfig/network-scripts/route-{}{}'.format(interface_prefix,i+1),
                        'permissions':'0644',
                        'description':'Route configuration for {}{}'.format(interface_prefix,i+1)
                    }

                    add_inject(node,inject=kwargs)

                    with open(src_path,'w+') as output_file:
                        output_file.write(inject_routes)
            

 

def main():

    if len(sys.argv) != 2:
        sys.exit(1)

    raw = sys.stdin.read()

    if sys.argv[1] == 'pre-start':
        exp = json.loads(raw)
        app = extract_app(exp)
        if 'metadata' in app:
            template_directory = app['metadata'].get('template-directory','/phenix/mako')
            pre_start(exp,template_directory)
        else:
            pre_start(exp)

        print(json.dumps(exp))
        sys.exit(0)

    print(raw)
    sys.exit(0)

if __name__ == '__main__':
    main()
	
	 
	
		
	


